

TODO Next Up
    (Switch to single-button play/pause in both editor and list)
    check code to determine 'playing' eigthNote &#9834;
    how does nowPlaying get its title?
    LIST PLAY
        delete Todo should remove it from the Playlist
            remove it from nowPlaying?
                yes
            filter todo to switch out nowPlaying?
                no
                well.. it might be ideal not to, but tracking conditions of playCounter get crazy
                of course, switching it out might also be complicated
                beginning to think:
                    better to manage playlist 'count' by playlist.find(id of nowPlaying) and then adjust from there...
anyway fyi when you filter a todo, that does call setNowPlaying
    TodoListing: updateTagFilters
        TodoListing setState & callback TodoListing: updatePlaylist
            redux setPlaylist
            saga setPlaylist (sets nowPlaying... via playCounter!)
                do you always want to setNowPlaying when you set the playlist? maybe a conditional?
                    why is it doing it now? ...



        what if you change the list filter while playing a todo not in the new list?
            it looses its title in nowPlaying...
            what if the playCounter is higher than playlist.length?
                it goes back to 0 (I think)
                not exactly. the playCounter stays the same... nothing is updating it
                    I think.




        if you save a todo from the editor while the list is playing, it gets lost and doesn't update
        Why is the list highlighting a Todo even when you're logged out?

    EDITOR
        update everything in the list & now playing on save
        (also what if you're playing someone else's list or the Radio?)
        when the todo is altered show a 'update' above the play button,
            & disable save unless altered
            use same compare function for both
            also, save should update the nowPlaying, (IF it's that one playing!)


    There's a general UI question about auto-update vs 'chosen' updates
        for both Editor and List. pros and cons on both sides.
        here's a thought:
            you probably can't auto-update the editing todo because of the formatting
            BUT maybe it can still affect the now playing?
                which would be good to hear instant feedback (which is what you'll want in ToneGems)
            so that's a case for auto-update (but not auto save) (title that says "save applies formatting")
            ALSO it's not clear if/how that can actually work.
            So for now u can do the update-button thing, which still gets the extra square out of the UI.







    LOGIN vs PERSISTENCE
        you can set the editingTodo from a non-logged-in user page
        Also, Playlist carries over from a non-logged-in user page
            Playlist and editing todo should be wiped on... when?
            Playlist should auto-refresh with tag selections


    TODO MVP
        likes: [array of user_ids of who's liked it]
        copy to editor option
        it's not doing the wait time.
            let's just remove wait time! u can add it later if u want...
        progress bar - AudioModule can send %
        expand list todo to show properties
        note should only be there WHILE it's playing, & animate... need the visual

    TODO Would-be-nice
        need some animation to make it more clear what's happening
        Global wait time override?
        filter by title
        display by alphabetical, created, updated,
        fold/unfold tags
        Todo-info: authorship


    test for login to display secure User components/routes
        and build them out


TODO Hmm
    goal is to be able to play a selection in the background while browsing other pages
        so a user page loads up todos, filters, choose playstyle, play
        on play, redux gets a copy of whatever the selection was.
            what if, on the user page, the filter is changed while it's playing?
            then redux gets a new list (but doesn't remove nowPLaying, that's managed separately)
        user can go away, other pages load etc.
        on navigate to a user page, compare with user_id in redux play and if it's the same load those settings
            that seems like a more advanced feature. for now, store list settings in the component
            later you can save the info in Redux for the activeUser/currentUser/whatever you call them
        so the 'player' is distinct from the radio & user pages, but interacts with both of them
            what is the 'management structure'?
    SEEMS LIKE
        there should be some general centralized check for auth for secure routes?
            and maybe a file division for public/secure routes
        Note how userId isn't actually used in create/update/delete todo
            so can people who are not logged in obtain todoId to hack it?
    What if you delete the currently editing todo?


TODOS ACCESS:
    secure:
        User page: create, update, delete
            ? Should there be some validation beyond the user _id?
            options aren't presented if not logged-in...
        Radio page: like
    public:
        User page: get all by user, filter all user's todos by tag
        Radio page:
            'default' streaming (...?)
                (not needed: filter-by-user (can just go to page...)
                filter-by-tag
    ... for now, let's just say that todo-redux-ing is all 'user page'
        (and some are secure, some aren't)
        probably to later rename 'userTodos' in reduxing
            (if you're sure that's good semantics)

const res = yield call(fetch, 'localhost:4000/todos')
    proc.js:513 Fetch API cannot load localhost:4000/todos. URL scheme must be "http" or "https" for CORS request.


scope/boundaries of project
    todos: tags, public, likes
        (for now, no distinction between tag and playlist...
            ie: no ordered playlists or 'compositions')
    ROUTES
        Home Page (later will have radio)
        Login/Register page
        User Page (Listing): filter by user & tag, alphabetical or most recent
            when you
        *Radio: filer by user and tag, play random with repeats
            ok so you can filter like that, but what about displaying the users?
        *Users (alphabetical, search, etc...)
        *Todos (most recent, trending)
    Seo: "Once the logic for users (auth, page, CRUD) is in place,
         the other features (radio, userlist etc) are like separate apps
         (which is why they get their own routes)
         the data (and some api calls?) may be the same,
            but you are using them in different ways (ie: different semantics)



TODO study
    saga cheatsheet https://www.udemy.com/course/redux-saga/learn/lecture/12387546#overview
    https://medium.com/@adlusk/a-newbs-guide-to-redux-saga-e597d8e6c486
    https://stackoverflow.com/questions/22677931/react-js-onchange-event-for-contenteditable
    https://hackernoon.com/moving-api-requests-to-redux-saga-21780f49cbc8

TODO misc
    persistence of play/pause state...
    "nowPlaying" - rename to be more clear, "currentPlayingTodo"


TODO LATER
    Playlists, hey why not? like for composing
        draggable Todo list!


REMEMBER: You're going to have to do it wrong...

TODO: Audio: how to switch Todos
    timing-override feature
            easy. audio just reads the timing from the store
    how are new Todos called?
        seems like you want a queue... don't assume DB call can be timely...
            how big is the queue?
                how about everything that matches the tag query with a configurable limit
            how often is it refreshed?
                on new play click?
                on new tag filter
                does it need to be refreshed? based on what the user is doing.
                    if there are more matches passed the queue limit
                    if there is some other option of, like, ordered playlists
            do you change the list order? or move a counter?
                how do you identify each item to avoid duplication?
            randomize vs
                https://news.ycombinator.com/item?id=20346406
            what's actually in the queue?
                can store by id or whole Todo & use typeof?
                    consider info-referencing logic
                        eg: "Next Up:"...
                how about: queue only stores saved items
                    ie: you can play a pre-saved todo in now playing,
                        but it doesn't "participate" in a list
                            playing an unsaved Todo exits the queue
                SO you *can* organize lists by _id
            what's the difference between the q and your Todo sidebar?
                for now let's say they're the same
                    build them with notion that they will be differentiated
                    TodosBar is for editing your personal work vs Radio contains other people's items,
                    both will need search and sort capacities
                        same API for each?
                        sorting will be different...
    first test: start with play-all in Radio section
        but just play from todos. No queue...
            use a counter
            randomizing shuffles the list (but for now does not affect counter)
            (highlight the current Todo in the list)
            is there really such a distinction between radio and workbench?
            clicking on a repertoire todo cancels list play (yes please!)
    SO you click "Play through list", then what?
        set PLAY_THROUGH to true (should *not* be toggle, always pass true)
        set nowPlaying to first in list
        use a 'changeNowPlaying' function like original
            what is relationship with setNowPlaying and advancePlayCounter?
                two updates must be called. how is this best managed?
        https://www.reddit.com/r/reactjs/comments/86lk43/redux_updating_multiple_state_objects_with_a/
            "If they are part of the same payload, you should listen for it in multiple reducers (1). That is what makes Redux great; that you can react to the same action multiple places."
        https://stackoverflow.com/questions/34531563/pattern-for-updating-multiple-parts-of-redux-state
        https://redux.js.org/recipes/structuring-reducers/immutable-update-patterns




        take stock of other things?
            entire redux structure

        note how you are using the TodoModel both
            to be playable (in nowPlaying)
            and as a faux-static method to get the description
            this seems to be a consequence of keeping the title and description as separate from a (playable) TodoModel instance
                which you are doing deliberately because it keeps the Mongoose model simpler, and all you really need to remember *is* the description
                but it makes this business a little more complicated!
            buildDisplayText - can/should that process be abstracted?


        (de)hydrate when transferring to/from DB
            all items? or just the editingTodo?
            actually, maybe it's just the nowPlayingTodo
            is there anything other than audio that needs any todo-class info (other than _id, title, other meta)
                maybe for filtering: tempo, pitchset?
            you may have to try both. let's start with just nowPlayingTodo

NEXT GOAL: SORT BY TAG AND PLAY
    save as user 'playlists' (just "lists" for Todos)



    REFACTORING
        can/should Todos api calls be moved out of redux? (maybe some of them?)
        omg the naming
            Todo vs instance of TodoModel
        which Todos have ids and which don't? where are they stored?
        "play" - playPause? playStop?
        new TodoModel created in handlePlayClick, handleSaveClick, and setNowPlaying reducer
            refactor this?
            refactor logic ( eg re: setEditingTodo) specifically in Todos.js?

    create fetch next todd
    set up audio
        will need a 'editing' and 'now playing' fields in redux,





*** LEARNED ***********************************************************************************
    re: you are managing fetchUserTodos (fetchPublicUserTodos) by passing it into TodoListing
    So, the thing about keeping this off redux is: if you want to manager higher-level state you have to put up with callbacks
    also you're having to duplicate the fetch logic in PublicUser and UserCompose...



*** LINKS ***************************************************************************************

    https://medium.com/jtribe/node-js-in-2018-full-stack-tutorial-with-koa-react-redux-sagas-and-mongodb-14a7efaee4d4
        don't forget u can deploy!
        https://blog.usejournal.com/serving-react-and-koa-together-720ba6668298

    https://zellwk.com/blog/mongoose-subdocuments/
    https://www.taniarascia.com/content-editable-elements-in-javascript-react/
    https://www.reddit.com/r/learnjavascript/comments/gh9fmr/extract_info_from_url/
        react-router-dom they also support url parameters such as http://mywebsite.com/users/:user.
    React Router
        https://www.udemy.com/course/react-redux/learn/lecture/12700531#overview
            history, see vids 258ish
        https://dev.to/projectescape/programmatic-navigation-in-react-3p1l
    https://icons8.com/
    https://stackoverflow.com/questions/10737166/chrome-not-rendering-svg-referenced-via-img-tag



optimize todo recognition: https://www.jetbrains.com/help/webstorm/using-todo.html




MISC DEV ?s
    What can 'fetch' not do that axios can?
    What would this look like to be 'ready to expand'?
        ie: completed MVP


REMOVED from https://medium.com/jtribe/node-js-in-2018-full-stack-tutorial-with-koa-react-redux-sagas-and-mongodb-14a7efaee4d4
    koa-helmet
    "proxy": "http://localhost:4000" (from frontend package.json)
        In case you want to use that sometime:
        https://hackernoon.com/overview-of-proxy-server-and-how-we-use-them-in-react-bf67c062b929
        https://medium.com/@Pavan_/set-up-proxy-to-work-with-multiple-apis-in-create-react-app-be595a713eb2
    server.js file - put the code into index.js for better error tracing
    ? to remove router.allowedMethods ... (is this doing anything?)
    ? app.use(require('koa-static')('./build'))
        probably need this for deployment



QUIPS
    Todos you can use. To make weird noises.
    Look busy. No, wait... sound busy.




***************************************************************

BULMA
    layout
        container
        column
        hero
        section (class)
        footer
        tile
    misc
        card (good for users)
        navbar
        menu
        media object
    https://www.youtube.com/watch?v=ouI1_tZ1yK4
    https://www.youtube.com/watch?v=H-2tcg_Qvhs



WEEKEND OF HTTP:
  async register(ctx) {
    const { body } = ctx.request;
    console.log("authController register body", body)
    (everything else commented out)
    ctx.redirect('http://localhost:3000/user');
  },
    Gets this Error:
        Access to fetch at 'http://localhost:3000/' (redirected from 'http://localhost:4000/auth/register')
        from origin 'http://localhost:3000' has been blocked by CORS policy:
        Response to preflight request doesn't pass access control check:
        The 'Access-Control-Allow-Origin' header has a value 'http://localhost:4000/'
        that is not equal to the supplied origin. Have the server send the header with
        a valid value, or, if an opaque response serves your needs,
        set the request's mode to 'no-cors'to fetch the resource with CORS disabled.
        discusses CORS
    tried "proxy": "http://localhost:4000"
    tried Moesif Origin and CORS changer! Let's get rid of that.
    WHAT Exactly is a 'redirect' doing?
    DEVTOOLS NETWORK: is this showing requests or responses? Or both? What/huh?


What is the difference between request and response headers?
    DOES A REQUEST CONTAIN RESPONSE HEADERS?
        Or are response headers added by the server?

Proxy:
    https://create-react-app.dev/docs/proxying-api-requests-in-development/
    "any unrecognized request without a text/html accept header will be redirected to the specified proxy"

CORS Info
    https://flaviocopes.com/http-request/
    https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview
    read up on fetch
        https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
    https://javascript.info/fetch
        https://javascript.info/fetch-crossorigin
    https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
    https://hackernoon.com/overview-of-proxy-server-and-how-we-use-them-in-react-bf67c062b929
    https://medium.com/@dtkatz/3-ways-to-fix-the-cors-error-and-how-access-control-allow-origin-works-d97d55946d9
    https://auth0.com/blog/cors-tutorial-a-guide-to-cross-origin-resource-sharing/
    https://www.digitalocean.com/community/questions/blocked-by-cors-policy-the-access-control-allow-origin-mean-stack



