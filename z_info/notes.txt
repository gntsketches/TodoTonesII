https://hackernoon.com/moving-api-requests-to-redux-saga-21780f49cbc8

what is the registerServiceWorker good for?
optimize todo recognition: https://www.jetbrains.com/help/webstorm/using-todo.html


TODO study
    review Udemy Sagas vids
    https://medium.com/@adlusk/a-newbs-guide-to-redux-saga-e597d8e6c486    https://stackoverflow.com/questions/22677931/react-js-onchange-event-for-contenteditable





FIRST GOAL: play all the todd's in your database without repeat

    Todo:
        test handleSaveClick
        then test handlePlayClick
        handlePlayClick should also update editingTodo... abstract that...
        take stock of things


        buildDisplayText - can/should that process be abstracted?

        omg the naming
            Todo vs instance of TodoModel
        which Todos have ids and which don't? where are they stored?

        note how you are using the TodoModel both
            to be playable (in nowPlaying)
            and as a faux-static method to get the description
            this seems to be a consequence of keeping the title and description as separate from a (playable) TodoModel instance
                which you are doing deliberately because it keeps the Mongoose model simpler, and all you really need to remember *is* the description
                but it makes this business a little more complicated!


        (de)hydrate when transferring to/from DB
            all items? or just the editingTodo?
            actually, maybe it's just the nowPlayingTodo
            is there anything other than audio that needs any todo-class info (other than _id, title, other meta)
                maybe for filtering: tempo, pitchset?
            you may have to try both. let's start with just nowPlayingTodo


    REFACTORING
        "nowPlaying" - rename to be more clear, "currentPlayingTodo"
        "play" - playPause? playStop?
        Bulma, is this really useable?

    create fetch next todd
    set up audio
        will need a 'editing' and 'now playing' fields in redux,




    https://medium.com/jtribe/node-js-in-2018-full-stack-tutorial-with-koa-react-redux-sagas-and-mongodb-14a7efaee4d4
        don't forget u can deploy!
        https://blog.usejournal.com/serving-react-and-koa-together-720ba6668298

    https://zellwk.com/blog/mongoose-subdocuments/
    https://www.taniarascia.com/content-editable-elements-in-javascript-react/




      try {
        const updateData = { ...body, createdAt: new Date() }
        const todo = await Todo.findByIdAndUpdate(id, updateData);
        ctx.body = todo
      } catch(e) {
        ctx.throw(e);
