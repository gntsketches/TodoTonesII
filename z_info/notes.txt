scope/boundaries of project
    todos: tags, public, likes
        (for now, no distinction between tag and playlist...
            ie: no ordered playlists or 'compositions')
    ROUTES
        Home Page (later will have radio)
        Login/Register page
        User Page (Listing): filter by user & tag, alphabetical or most recent
            when you
        *Radio: filer by user and tag, play random with repeats
            ok so you can filter like that, but what about displaying the users?
        *Users (alphabetical, search, etc...)
        *Todos (most recent, trending)
    Seo: "Once the logic for users (auth, page, CRUD) is in place,
         the other features (radio, userlist etc) are like separate apps
         (which is why they get their own routes)
         the data (and some api calls?) may be the same,
            but you are using them in different ways (ie: different semantics)

Steps to Login/UserPage
    review Koa book app
    review Routes in Grider/ToneGems & auth logic
        ? is there something about Grider frontend routes that is incompatible with Koa book?
        ? is it related to that Proxy thing?

TODO study
    saga cheatsheet https://www.udemy.com/course/redux-saga/learn/lecture/12387546#overview
    https://medium.com/@adlusk/a-newbs-guide-to-redux-saga-e597d8e6c486
    https://stackoverflow.com/questions/22677931/react-js-onchange-event-for-contenteditable
    https://hackernoon.com/moving-api-requests-to-redux-saga-21780f49cbc8

TODO misc
    move things into the redux folder
    "nowPlaying" - rename to be more clear, "currentPlayingTodo"



FIRST GOAL: play all the Todo's in your database without repeat
    remember: you're going to have to do it wrong...

TODO: Audio: how to switch Todos
    timing-override feature
            easy. audio just reads the timing from the store
    how are new Todos called?
        seems like you want a queue... don't assume DB call can be timely...
            how big is the queue?
                how about everything that matches the tag query with a configurable limit
            how often is it refreshed?
                on new play click?
                on new tag filter
                does it need to be refreshed? based on what the user is doing.
                    if there are more matches passed the queue limit
                    if there is some other option of, like, ordered playlists
            do you change the list order? or move a counter?
                how do you identify each item to avoid duplication?
            randomize vs
                https://news.ycombinator.com/item?id=20346406
            what's actually in the queue?
                can store by id or whole Todo & use typeof?
                    consider info-referencing logic
                        eg: "Next Up:"...
                how about: queue only stores saved items
                    ie: you can play a pre-saved todo in now playing,
                        but it doesn't "participate" in a list
                            playing an unsaved Todo exits the queue
                SO you *can* organize lists by _id
            what's the difference between the q and your Todo sidebar?
                for now let's say they're the same
                    build them with notion that they will be differentiated
                    TodosBar is for editing your personal work vs Radio contains other people's items,
                    both will need search and sort capacities
                        same API for each?
                        sorting will be different...
    first test: start with play-all in Radio section
        but just play from todos. No queue...
            use a counter
            randomizing shuffles the list (but for now does not affect counter)
            (highlight the current Todo in the list)
            is there really such a distinction between radio and workbench?
            clicking on a repertoire todo cancels list play (yes please!)
    SO you click "Play through list", then what?
        set PLAY_THROUGH to true (should *not* be toggle, always pass true)
        set nowPlaying to first in list
        use a 'changeNowPlaying' function like original
            what is relationship with setNowPlaying and advancePlayCounter?
                two updates must be called. how is this best managed?
        https://www.reddit.com/r/reactjs/comments/86lk43/redux_updating_multiple_state_objects_with_a/
            "If they are part of the same payload, you should listen for it in multiple reducers (1). That is what makes Redux great; that you can react to the same action multiple places."
        https://stackoverflow.com/questions/34531563/pattern-for-updating-multiple-parts-of-redux-state
        https://redux.js.org/recipes/structuring-reducers/immutable-update-patterns




        take stock of other things?
            entire redux structure

        note how you are using the TodoModel both
            to be playable (in nowPlaying)
            and as a faux-static method to get the description
            this seems to be a consequence of keeping the title and description as separate from a (playable) TodoModel instance
                which you are doing deliberately because it keeps the Mongoose model simpler, and all you really need to remember *is* the description
                but it makes this business a little more complicated!
            buildDisplayText - can/should that process be abstracted?


        (de)hydrate when transferring to/from DB
            all items? or just the editingTodo?
            actually, maybe it's just the nowPlayingTodo
            is there anything other than audio that needs any todo-class info (other than _id, title, other meta)
                maybe for filtering: tempo, pitchset?
            you may have to try both. let's start with just nowPlayingTodo

NEXT GOAL: SORT BY TAG AND PLAY
    save as user 'playlists' (just "lists" for Todos)



    REFACTORING
        omg the naming
            Todo vs instance of TodoModel
        which Todos have ids and which don't? where are they stored?
        "play" - playPause? playStop?
        new TodoModel created in handlePlayClick, handleSaveClick, and setNowPlaying reducer
            refactor this?
            refactor logic ( eg re: setEditingTodo) specifically in Todos.js?

    create fetch next todd
    set up audio
        will need a 'editing' and 'now playing' fields in redux,




    https://medium.com/jtribe/node-js-in-2018-full-stack-tutorial-with-koa-react-redux-sagas-and-mongodb-14a7efaee4d4
        don't forget u can deploy!
        https://blog.usejournal.com/serving-react-and-koa-together-720ba6668298

    https://zellwk.com/blog/mongoose-subdocuments/
    https://www.taniarascia.com/content-editable-elements-in-javascript-react/



optimize todo recognition: https://www.jetbrains.com/help/webstorm/using-todo.html

      try {
        const updateData = { ...body, createdAt: new Date() }
        const todo = await Todo.findByIdAndUpdate(id, updateData);
        ctx.body = todo
      } catch(e) {
        ctx.throw(e);




BULMA
    layout
        container
        column
        hero
        section (class)
        footer
        tile
    misc
        card (good for users)
        navbar
        menu
        media object
    https://www.youtube.com/watch?v=ouI1_tZ1yK4
    https://www.youtube.com/watch?v=H-2tcg_Qvhs
